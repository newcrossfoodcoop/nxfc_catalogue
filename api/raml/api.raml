#%RAML 0.8

title: NXFC Catalogue
baseUri: http://localhost:3010/api
version: 0.1.0

schemas:
  - Supplier: !include schema/supplier.json
  - Product: !include schema/product.json
  - Ingest: !include schema/ingest.json
  - IngestLog: !include schema/ingest-log.json
  - Order: !include schema/order.json

resourceTypes:
  - base:
      get?:
        responses: &standardResponses
          200:
            description: OK
      put?:
        responses: *standardResponses
      post?:
        responses: *standardResponses
      delete?:
        responses: *standardResponses
  - collection:
      type: base
      get:
      post:
  - typedCollection:
      type: collection
      get:
        responses:
          200:
            body:
              application/json:
                schema: <<collectionSchema>>
      post:
        body:
          application/json:
            schema: <<schema>>
        responses:
          200:
            body:
              application/json:
                schema: <<schema>>
  - typedMemberCollection:
      type: collection
      get:
        description: List <<schema>>
        responses:
          200:
            body:
              application/json:
                schema: |
                  {
                    "$schema": "http://json-schema.org/draft-03/schema#", 
                    "type": "array", 
                    "properties": { "$ref": "<<schema>>" } 
                  }
      post:
        description: Create <<schema>>
        body:
          application/json:
            schema: <<schema>>
        responses:
          200:
            body:
              application/json:
                schema: <<schema>>
  - member:
      type: base
      get:
      put:
      delete:
  - typedMember:
      type: member
      get:
        description: Read <<schema>>
        responses:
          200:
            body:
              application/json:
                schema: <<schema>>
      put:
        description: Update <<schema>>
        body:
          application/json:
            schema: <<schema>>
        responses:
          200:
            body:
              application/json:
                schema: <<schema>>
      delete:
        description: Delete <<schema>>

/suppliers:
  displayName: Suppliers
  type: { typedMemberCollection: { schema: Supplier } }
  post:
    body:
      application/json:
        example: |
          {
            "description": "Description of My Supplier",
            "name": "My Supplier Name",
            "customerId": 1234
          }
  /{supplierId}:
    type: { typedMember: { schema: Supplier } }

/products:
  displayName: Products
  type: { typedMemberCollection: { schema: Product } }
  post:
    body:
      application/json:
        example: |
          {
            "description": "Description of My Product",
            "name": "My Product Name",
            "brand" : "My Brand",
            "tag" : "My Tag",
            "supplier": "1234567890abcdef123456a1"
          }
  put:
    description: "Search for products by ID"
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema#",
            "type": "array",
            "items": { "type": "string" }
          }
        example: |
          [ "57c4b1ba1abb0114001963c5", "57c4b1bc1abb0119001963e9" ]
    responses:
      200:
        body:
          application/json:
            schema: |
              {
                "$schema": "http://json-schema.org/draft-03/schema#", 
                "type": "array", 
                "items": { "$ref": "Product" } 
              }
            example: "[]"
  get:
    queryParameters:
      itemsperpage:
        type: "integer"
        default: 20
      pagenumber:
        type: "integer"
        default: 1
      textsearch:
        type: "string"
      tags:
        type: "string"
      id:
        type: "string"
      sort:
        type: "string"
        default: "name"
  /count:
    get:
      description: count of matching products
      queryParameters: 
        tags: 
          description: comma delimited tag names
          type: string
        textsearch:
          description: search string 
          type: string
      responses:
        200:
          body:
            application/json:
              example: |
                { "count": 42 }
  /tags:
    get:
      description: list of distinct product tags
      responses:
        200:
          body:
            application/json:
              schema: |
                {
                  "$schema": "http://json-schema.org/draft-03/schema#",
                  "type": "array",
                  "properties": "string"
                }
  /brands:
    get:
      description: list of distinct product brands
      responses:
        200:
          body:
            application/json:
              schema: |
                {
                  "$schema": "http://json-schema.org/draft-03/schema#",
                  "type": "array",
                  "properties": "string"
                }
  /suppliercodes:
    get:
      description: list of distinct product supplier codes
      responses:
        200:
          body:
            application/json:
              schema: |
                {
                  "$schema": "http://json-schema.org/draft-03/schema#",
                  "type": "array",
                  "properties": "string"
                }
  /{productId}:
    type: { typedMember: { schema: Product } }

/ingests:
  displayName: Ingests
  type: { typedMemberCollection: { schema: Ingest } }
  post:
    body:
      application/json:
        example: |
          {
            "description": "Description of My Ingest",
            "name": "My Ingest Name",
            "supplier": "57c4b1ba1abb0114001963c5",
            "downloadUrl": "http://products_api:3010/api.csv",
            "fieldMap": "one: A\ntwo: B\nthree: C"
          }
  /{ingestId}:
    type: { typedMember: { schema: Ingest } }
    
    /start-run:
      get:
        description: Kick off a run of this ingest
        queryParameters:
          limit:
            description: Limit the number of items to process in the run
            type: integer
        responses:
          200:
            body:
              application/json:
                schema: |
                  {
                    "$schema": "http://json-schema.org/draft-03/schema#", 
                    "type": "object", 
                    "properties": { 
                      "ingestLog": "string",
                      "status": {
                        "type": "string",
                        "enum": ["accepted","rejected"]
                      }
                    }
                  }
    /runs:
      get:
        description: Return the list of runs of this ingest
        responses:
          200:
            body:
              application/json:
                schema: |
                  {
                    "$schema": "http://json-schema.org/draft-03/schema#", 
                    "type": "array", 
                    "properties": { "$ref": "IngestLog" } 
                  }
  /runs:
    /{runId}:
      displayName: Ingest Logs
      get:
        description: Each ingest run has a log
        responses:
          200:
            body:
              application/json:
                schema: IngestLog
      /log:
        get:
          description: Log entries for a specific ingest run
          responses:
            200:
              body:
                application/json:
                  schema: |
                    {
                      "$schema": "http://json-schema.org/draft-03/schema#",
                      "type": "array",
                      "properties": {
                        "message": {
                           "type": "string",
                           "required": "true"
                        }
                      }
                    }

/orders:
  displayName: Orders
  type: { typedMemberCollection: { schema: Order } }
  post:
    body:
      application/json:
        example: |
          {
            "supplier": "57c4b1ba1abb0114001963c5",
            "deliveryAddress": "The delivery Address",
            "deliveryMessage": "Please deliver on the 9th",
            "items": [{
              "product": "57c4b1ba1abb0114001963c5",
              "quantity": 5
            }],
            "stockOrderId": "57c4b1ba1abb0114001963c5"
          }
  /{orderId}:
    type: { typedMember: { schema: Order } }
    /csv:
      description: "Returns a csv file of this order"
      get:
        responses:
          200:
            body:
              text/csv:
